datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String   @id @default(cuid())
  name     String?
  email    String   @unique
  password String
  role     UserRole @default(CLAIMANT)

  // Cases where user is claimant
  claimantCases   Case[] @relation("ClaimantCases")
  // Cases where user is respondent
  respondentCases Case[] @relation("RespondentCases")
  // Cases where user is case manager
  managedCases    Case[] @relation("ManagedCases")
  // Cases where user is neutral
  neutralCases    Case[] @relation("NeutralCases")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Case {
  id                 String    @id @default(cuid())
  status             String    @default("DRAFT")
  
  // Claimant Information
  claimantRequest    String?   // Brief description of the issue
  claimantPhone      String?   // Phone number
  claimantAddress    String?   // Address
  preferredContact   String?   // Preferred method of contact
  accountNumber      String?   // ID/account number if applicable
  
  // Respondent Information
  respondentResponse String?   // Response from respondent
  respondentPhone    String?   // Respondent phone if known
  respondentAddress  String?   // Respondent address if known
  relationship       String?   // Relationship to claimant
  
  // Dispute Details
  incidentDate      DateTime? // Date of incident/transaction
  incidentLocation  String?   // Location/venue
  disputeAmount     Float?    // Amount in dispute (if monetary)
  disputeCategory   String?   // Category of dispute
  desiredResolution String?   // Desired resolution/remedy
  
  // Evidence
  evidenceFiles     String[]  // Array of file URLs
  evidenceNotes     String?   // Description of evidence
  witnesses         Json?     // Witness information as JSON
  
  // Previous Resolution Attempts
  priorContact      Boolean   @default(false)
  priorContactDates String?   // Dates of previous communication
  priorMethods      String?   // Methods of previous communication
  priorResults      String?   // Results of previous attempts
  
  // Declaration
  truthStatement    Boolean   @default(false)
  signature         String?   // Electronic signature
  submissionDate    DateTime  @default(now())
  
  finalDecision      String?
  neutralAssigned    Boolean  @default(false)

  // Relations
  claimant   User   @relation("ClaimantCases", fields: [claimantId], references: [id])
  claimantId String

  respondent   User?   @relation("RespondentCases", fields: [respondentId], references: [id])
  respondentId String?

  caseManager   User?   @relation("ManagedCases", fields: [caseManagerId], references: [id])
  caseManagerId String?

  // Neutral relationship
  neutralId String?
  neutral   User?   @relation("NeutralCases", fields: [neutralId], references: [id])

  // Invitations
  invitations CaseInvitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CaseInvitation {
  id        String   @id @default(cuid())
  caseId    String
  email     String
  token     String   @unique
  status    String   @default("PENDING") // PENDING, ACCEPTED, EXPIRED
  case      Case     @relation(fields: [caseId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum UserRole {
  CLAIMANT
  RESPONDENT
  CASE_MANAGER
  REGISTRAR
  NEUTRAL
}

enum CaseStatus {
  PENDING_RESPONDENT
  ASSIGNED_TO_MANAGER
  PENDING_PREPROCEEDING_CLAIMANT
  PENDING_PREPROCEEDING_RESPONDENT
  PENDING_NEUTRAL
  NEUTRAL_ASSIGNED
  IN_PROGRESS
  DECISION_ISSUED
  CLOSED
  APPEALED
}
